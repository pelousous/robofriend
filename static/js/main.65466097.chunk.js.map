{"version":3,"sources":["containers/App.js","actions.js","constants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["CardList","React","lazy","SearchBox","Scroll","App","this","props","onRequestRobots","searchField","onSearchChange","robots","isPending","filteredRobots","filter","robot","name","toLowerCase","includes","className","fallback","searchChange","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","type","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.65466097.chunk.js","sourcesContent":["import React, { Component, Suspense } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport { setSearchField, requestRobots } from '../actions';\n\nconst CardList = React.lazy(() => import('../components/CardList'));\nconst SearchBox = React.lazy(() => import('../components/SearchBox'));\nconst Scroll = React.lazy(() => import('../components/Scroll'));\n\n/*import CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';*/\n\n\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots()) \n    }\n}\n\nclass App extends Component {\n\n  componentDidMount() {   \n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1-ns'>RoboFriends</h1>\n          <Suspense fallback={<div>Loading...</div>}>\n            <SearchBox searchChange={onSearchChange}/>\n            <Scroll>\n                <CardList robots={filteredRobots} />\n            </Scroll>\n          </Suspense>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n/* mapStateToProps = tell me what piece of state i need to listen to and send it down as props */\n/* mapDispatchToProps =  tell me what props i need to listen to that are actions to get dispatched */ ","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOT_PENDING,\n    REQUEST_ROBOT_SUCCESS,\n    REQUEST_ROBOT_FAILED \n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text    \n})\n/* when it returns a function and not a state it pass through \n   the thunk middleware that manage asyncs calls */\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOT_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(data => dispatch({type: REQUEST_ROBOT_SUCCESS, payload: data}))\n      .catch(error => dispatch({type: REQUEST_ROBOT_FAILED, payload: error}));\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOT_PENDING = 'REQUEST_ROBOT_PENDING';\nexport const REQUEST_ROBOT_SUCCESS = 'REQUEST_ROBOT_SUCCESS';\nexport const REQUEST_ROBOT_FAILED = 'REQUEST_ROBOT_FAILED';","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOT_PENDING,\n    REQUEST_ROBOT_SUCCESS,\n    REQUEST_ROBOT_FAILED \n} from './constants.js';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n         case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOT_PENDING:\n            return Object.assign({}, state, { isPending: true})\n        case REQUEST_ROBOT_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\n        case REQUEST_ROBOT_FAILED: \n            return Object.assign({}, state, { error: action.payload, isPending: false })\n        default:\n            return state;            \n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\n/* use to manage aynchronous actions in redux */\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { searchRobots, requestRobots } from './reducers.js';\nimport 'tachyons';\n\nconst logger = createLogger();\n\n/* combineReducer is a function used to compose reducers in a root reducer */\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n/* the middlewares are applied in order */\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(<Provider store={store}>\n                    <App />\n                </Provider>, document.getElementById('root'));\nregisterServiceWorker();\n\n/* PROVIDER take care of passing down the store to all the components down the component tree */\n/* CONNECT  is to use inside container component to let know the component that we can use the store */\n/* the connect is a high order function that allow the component to subscribe to any state changes */\n"],"sourceRoot":""}